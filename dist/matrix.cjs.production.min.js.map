{"version":3,"file":"matrix.cjs.production.min.js","sources":["../src/matrix.ts"],"sourcesContent":["import { Robot, Adapter, Envelope, TextMessage, User } from \"hubot\";\nimport {\n  ClientEvent,\n  ISendEventResponse,\n  MatrixClient,\n  RoomEvent,\n  RoomMemberEvent,\n} from \"matrix-js-sdk\";\n\nimport sdk from \"matrix-js-sdk\";\nimport request from \"request\";\nimport sizeOf from \"image-size\";\nimport { makeHtmlNotice, makeNotice } from \"matrix-js-sdk/lib/content-helpers\";\nimport { Parser, HtmlRenderer } from \"commonmark\";\n\n/**\n * The Matrix-specific metadata available about a message.\n */\nexport type MatrixMessageMetadata = {\n  readonly threadId?: string;\n  readonly interpretMarkdown?: boolean;\n};\n\n/**\n * Represents a regular Hubot TextMessage with additional Matrix metadata.\n */\nexport class MatrixMessage extends TextMessage {\n  constructor(\n    user: User,\n    text: string,\n    id: string,\n    public metadata: MatrixMessageMetadata\n  ) {\n    super(user, text, id);\n  }\n}\n\nexport class Matrix extends Adapter {\n  public client: MatrixClient | undefined;\n  private user_id: string | undefined;\n  private access_token: string | undefined;\n  private device_id: string | undefined;\n\n  private commonMarkReader = new Parser();\n  private commonMarkRenderer = new HtmlRenderer({ safe: true, softbreak: \"<br />\" });\n\n  constructor(private robot: Robot<Matrix>) {\n    super(robot);\n    this.robot.logger.info(\"Constructor\");\n  }\n\n  handleUnknownDevices(err: { devices: { [x: string]: any } }) {\n    return (() => {\n      let result = [];\n      for (var stranger in err.devices) {\n        var devices = err.devices[stranger];\n        result.push(\n          (() => {\n            let result1 = [];\n            for (let device in devices) {\n              this.robot.logger.info(\n                `Acknowledging ${stranger}'s device ${device}`\n              );\n              result1.push(this.client?.setDeviceKnown(stranger, device));\n            }\n            return result1;\n          })()\n        );\n      }\n      return result;\n    })();\n  }\n\n  send(envelope: Envelope, ...strings: any[]) {\n    return strings.map((str) => this.sendThreaded(envelope, undefined, str));\n  }\n\n  async resolveRoom(room: string): Promise<string> {\n    const roomFromId = this.client?.getRoom(room)\n    if (roomFromId !== null && roomFromId !== undefined) {\n      return room\n    }\n\n    const roomIdFromAlias = (await this.client?.getRoomIdForAlias(room))?.room_id\n    if (roomIdFromAlias === undefined) {\n      throw new Error(`Failed to resolve specified room: ${room}.`)\n    }\n\n    return roomIdFromAlias\n  }\n\n  async sendThreaded(\n    envelope: Envelope,\n    threadId: string | undefined,\n    message: string\n  ): Promise<ISendEventResponse | undefined> {\n    const resolvedRoom = await this.resolveRoom(envelope.room)\n\n    const interpretMarkdown =\n      \"metadata\" in (envelope.message ?? {})\n        ? (envelope.message as MatrixMessage).metadata.interpretMarkdown ?? true\n        : true;\n\n    const finalMessage = interpretMarkdown\n      ? makeHtmlNotice(\n          message,\n          this.commonMarkRenderer.render(this.commonMarkReader.parse(message))\n        )\n      : makeNotice(message);\n\n    this.robot.logger.info(`Sending to ${envelope.room} (resolved to ${resolvedRoom}): ${message}`);\n    if (/^(f|ht)tps?:\\/\\//i.test(message)) {\n      return this.sendURL(envelope, message);\n    }\n    if (threadId !== undefined) {\n      return this.client\n        ?.sendMessage(resolvedRoom, threadId, finalMessage)\n        ?.catch((err) => {\n          if (err.name === \"UnknownDeviceError\") {\n            this.handleUnknownDevices(err);\n            return this.client?.sendMessage(\n              resolvedRoom,\n              threadId,\n              finalMessage\n            );\n          }\n        });\n    }\n    return this.client\n      ?.sendMessage(resolvedRoom, finalMessage)\n      .catch((err) => {\n        if (err.name === \"UnknownDeviceError\") {\n          this.handleUnknownDevices(err);\n          return this.client?.sendMessage(resolvedRoom, finalMessage);\n        }\n      });\n  }\n\n  async emote(envelope: Envelope, ...strings: string[]) {\n    const resolvedRoom = await this.resolveRoom(envelope.room)\n\n    return Array.from(strings).map((str) =>\n      this.client?.sendEmoteMessage(resolvedRoom, str).catch((err) => {\n        if (err.name === \"UnknownDeviceError\") {\n          this.handleUnknownDevices(err);\n          return this.client?.sendEmoteMessage(resolvedRoom, str);\n        }\n      })\n    );\n  }\n\n  reply(envelope: Envelope, ...strings: string[]) {\n    const threadId =\n      \"metadata\" in envelope.message\n        ? (envelope.message as MatrixMessage).metadata.threadId\n        : undefined;\n\n    return Array.from(strings).map((str) =>\n      this.sendThreaded(envelope, threadId, `${envelope.user.name}: ${str}`)\n    );\n  }\n\n  topic(envelope: Envelope, ...strings: string[]) {\n    return Array.from(strings).map((str) =>\n      this.client?.sendStateEvent(\n        envelope.room,\n        \"m.room.topic\",\n        {\n          topic: str,\n        },\n        \"\"\n      )\n    );\n  }\n\n  async sendURL(\n    envelope: Envelope,\n    url: string\n  ): Promise<ISendEventResponse | undefined> {\n    const resolvedRoom = await this.resolveRoom(envelope.room)\n\n    this.robot.logger.info(`Downloading ${url}`);\n    return new Promise((resolve, reject) => {\n      request({ url, encoding: null }, (error, response, body) => {\n        if (error) {\n          this.robot.logger.info(`Request error: ${JSON.stringify(error)}`);\n          reject(error);\n        } else if (response.statusCode === 200) {\n          let info: sdk.IImageInfo;\n          try {\n            let dims = sizeOf(body);\n            this.robot.logger.info(\n              `Image has dimensions ${JSON.stringify(dims)}, size ${\n                body.length\n              }`\n            );\n            if (dims.type === \"jpg\") {\n              dims.type = \"jpeg\";\n            }\n            info = {\n              mimetype: `image/${dims.type}`,\n              h: dims.height,\n              w: dims.width,\n              size: body.length,\n            };\n            resolve(\n              this.client\n                ?.uploadContent(body, {\n                  name: url,\n                  type: info.mimetype,\n                  rawResponse: false,\n                  onlyContentUri: true,\n                })\n                .then((content_uri) => {\n                  return this.client\n                    ?.sendImageMessage(resolvedRoom, content_uri, info, url)\n                    .catch((err) => {\n                      if (err.name === \"UnknownDeviceError\") {\n                        this.handleUnknownDevices(err);\n                        return this.client?.sendImageMessage(\n                          resolvedRoom,\n                          content_uri,\n                          info,\n                          url\n                        );\n                      }\n                    });\n                })\n            );\n          } catch (error1) {\n            error = error1;\n            this.robot.logger.info(error.message);\n            resolve(this.sendThreaded(envelope, undefined, ` ${url}`));\n          }\n        }\n      });\n    });\n  }\n\n  run() {\n    this.robot.logger.info(`Run ${this.robot.name}`);\n    if (process.env.HUBOT_MATRIX_ACCESS_TOKEN) {\n      this.robot.logger.info(\"Login by access token\");\n      this.user_id = process.env.HUBOT_MATRIX_USER;\n      this.access_token = process.env.HUBOT_MATRIX_ACCESS_TOKEN;\n      this.access();\n    } else {\n      this.robot.logger.info(\"Login by password\");\n      let client = sdk.createClient({\n        baseUrl: process.env.HUBOT_MATRIX_HOST_SERVER || \"https://matrix.org\",\n        request: request,\n      });\n      return client.login(\n        \"m.login.password\",\n        {\n          user: process.env.HUBOT_MATRIX_USER || this.robot.name,\n          password: process.env.HUBOT_MATRIX_PASSWORD,\n        },\n        (\n          err: any,\n          data: { user_id: string; access_token: string; device_id: string }\n        ) => {\n          if (err) {\n            this.robot.logger.error(err);\n            return;\n          }\n          this.user_id = data.user_id;\n          this.access_token = data.access_token;\n          this.device_id = data.device_id;\n          this.access();\n        });\n    }\n  }\n\n  access() {\n    this.robot.logger.info(\n      `Logged in ${this.user_id} on device ${this.device_id}`\n    );\n    this.client = sdk.createClient({\n      baseUrl: process.env.HUBOT_MATRIX_HOST_SERVER || \"https://matrix.org\",\n      accessToken: this.access_token,\n      userId: this.user_id,\n      deviceId: this.device_id,\n      request,\n    });\n    this.client?.on(ClientEvent.Sync, (state) => {\n      switch (state) {\n        case \"PREPARED\":\n          this.robot.logger.info(\n            `Synced ${this.client?.getRooms().length} rooms`\n          );\n          // We really don't want to let people set the display name to something other than the bot\n          // name because the bot only reacts to it's own name.\n          const currentDisplayName = this.client?.getUser(\n            this.user_id ?? \"\"\n          )?.displayName;\n          if (this.robot.name !== currentDisplayName) {\n            this.robot.logger.info(\n              `Setting display name to ${this.robot.name}`\n            );\n            this.client?.setDisplayName(this.robot.name, () => {});\n          }\n          return this.emit(\"connected\");\n      }\n    });\n    this.client?.on(\n      RoomEvent.Timeline,\n      (event, room, toStartOfTimeline) => {\n        if (\n          event.getType() === \"m.room.message\" &&\n          toStartOfTimeline === false\n        ) {\n          this.client?.setPresence({ presence: \"online\" });\n          let id = event.getId();\n          let message = event.getContent();\n          let name = event.getSender();\n          let user = this.robot.brain.userForId(name);\n          user.room = room.getCanonicalAlias() ?? room.roomId;\n          if (name !== this.user_id) {\n            this.robot.logger.info(\n              `Received message: ${JSON.stringify(message)} in room: ${\n                user.room\n              }, from: ${user.name} (${user.id}).`\n            );\n            if (message.msgtype === \"m.text\") {\n              const messageThreadId = event.threadRootId ?? id;\n\n              this.receive(\n                new MatrixMessage(user, message.body, id, {\n                  threadId: messageThreadId,\n                })\n              );\n            }\n            if (\n              message.msgtype !== \"m.text\" ||\n              message.body.indexOf(this.robot.name) !== -1\n            ) {\n              return this.client?.sendReadReceipt(event);\n            }\n          }\n        }\n      }\n    );\n    this.client?.on(RoomMemberEvent.Membership, async (event, member) => {\n      if (\n        member.membership === \"invite\" &&\n        member.userId === this.user_id\n      ) {\n        await this.client?.joinRoom(member.roomId);\n        this.robot.logger.info(`Auto-joined ${member.roomId}`);\n      }\n    });\n    return this.client?.startClient({ initialSyncLimit: 0 });\n  }\n}\n\nexport function use(robot: Robot<any>): Matrix {\n  return new Matrix(robot);\n}\n"],"names":["MatrixMessage","_TextMessage","user","text","id","metadata","_this","call","this","_inheritsLoose","TextMessage","Matrix","_Adapter","robot","_this2","client","user_id","access_token","device_id","commonMarkReader","Parser","commonMarkRenderer","HtmlRenderer","safe","softbreak","logger","info","_proto","prototype","handleUnknownDevices","err","_this3","result","stranger","devices","push","result1","device","_this3$client","setDeviceKnown","send","envelope","_this4","_len","arguments","length","strings","Array","_key","map","str","sendThreaded","undefined","resolveRoom","_resolveRoom","_asyncToGenerator","_regeneratorRuntime","mark","room","_this$client","_yield$this$client$ge","_this$client2","roomIdFromAlias","wrap","_context","prev","next","roomFromId","getRoom","abrupt","getRoomIdForAlias","t0","sent","t1","room_id","Error","stop","_callee","_x","apply","_sendThreaded","threadId","message","_envelope$message","_envelope$message$met","_this$client4","resolvedRoom","interpretMarkdown","finalMessage","_this$client3","_this$client3$sendMes","_this5","_context2","makeHtmlNotice","render","parse","makeNotice","test","sendURL","sendMessage","_this5$client","name","_this5$client2","_callee2","_x2","_x3","_x4","emote","_emote","_len2","_key2","_this6","_args3","_context3","from","_this6$client","sendEmoteMessage","_this6$client2","_callee3","_x5","reply","_this7","_len3","_key3","topic","_this8","_len4","_key4","_this8$client","sendStateEvent","_sendURL","_callee4","url","_this9","_context4","Promise","resolve","reject","request","encoding","error","response","body","JSON","stringify","statusCode","_this9$client","dims","sizeOf","type","mimetype","h","height","w","width","size","uploadContent","rawResponse","onlyContentUri","then","content_uri","_this9$client2","sendImageMessage","_this9$client3","error1","_x6","_x7","run","_this10","process","env","HUBOT_MATRIX_ACCESS_TOKEN","sdk","createClient","baseUrl","HUBOT_MATRIX_HOST_SERVER","login","HUBOT_MATRIX_USER","password","HUBOT_MATRIX_PASSWORD","data","access","_this$client5","_this$client6","_this$client7","_this$client8","_this11","accessToken","userId","deviceId","on","ClientEvent","Sync","state","_this11$client","_this11$client2","_this11$client2$getUs","_this11$user_id","getRooms","_this11$client3","currentDisplayName","getUser","displayName","setDisplayName","emit","RoomEvent","Timeline","event","toStartOfTimeline","getType","_this11$client4","_room$getCanonicalAli","setPresence","presence","getId","getContent","getSender","brain","userForId","getCanonicalAlias","roomId","msgtype","_event$threadRootId","messageThreadId","threadRootId","receive","_this11$client5","indexOf","sendReadReceipt","RoomMemberEvent","Membership","_ref","_callee5","member","_this11$client6","_context5","membership","joinRoom","_x8","_x9","startClient","initialSyncLimit","Adapter"],"mappings":"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"}